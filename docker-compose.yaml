version: "3.8"

services:
  app:
    ports:
      - "8000:8000"
    build: ./app/
    image: python:3.9-slim
    container_name: balance-app
    restart: unless-stopped
    volumes:
      - ./app:/app
    working_dir: /app
    env_file:
      - .env.app
    environment:
      - UVICORN_HOST=0.0.0.0
      - UVICORN_PORT=8000
    depends_on:
      rabbitmq:
        condition: service_healthy
      database:
        condition: service_healthy
    command: uvicorn main:app --host 0.0.0.0 --port 8000
    expose:
      - "8000"
    networks:
      - app-network

  web-proxy:
    image: nginx:alpine
    container_name: nginx-proxy
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/conf.d/default.conf:ro
    depends_on:
      - app
    networks:
      - app-network
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://app:8000" ]
      interval: 30s
      timeout: 10s
      retries: 3

  rabbitmq:
    image: rabbitmq:4.1.0-beta.5-alpine
    container_name: rabbitmq-broker
    ports:
      - "5672:5672"
      - "15672:15672"
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    environment:
      RABBITMQ_DEFAULT_USER: admin
      RABBITMQ_DEFAULT_PASS: securepassword
    restart: on-failure
    healthcheck:
      test: [ "CMD", "rabbitmq-diagnostics", "ping" ]
      interval: 10s
      timeout: 5s
      retries: 15
      start_period: 30s

  database:
    image: postgres:13-alpine
    container_name: postgres-db
    volumes:
      - postgres_data:/var/lib/postgresql/data
    env_file:
      - .env.db
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB"]
      interval: 5s
      timeout: 5s
      retries: 5


  db-admin:
    image: adminer:latest
    container_name: adminer
    ports:
      - "8081:8080"
    environment:
      ADMINER_DEFAULT_SERVER: database
    depends_on:
      - database
    networks:
      - app-network

  ml-model:
    build: ./ml/
    image: ml-model:latest
    container_name: ml-model
    restart: unless-stopped
    environment:
      - MODEL_PATH=/app/models/pretrained
      - RABBITMQ_URL=amqp://admin:securepassword@rabbitmq-broker:5672/
      - BATCH_SIZE=32
      - DEVICE=cpu
    volumes:
      - ./ml-service/models:/app/models
      - ./ml-service/config:/app/config
    networks:
      - app-network
    depends_on:
      rabbitmq:
        condition: service_healthy
    deploy:
      resources:
        limits:
          memory: 8G
    healthcheck:
      test: ["CMD", "curl", "-f", "http://ml-model:8500/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  ml-worker:
    image: ml-model:latest
    command: ["python", "worker.py"]
    deploy:
      replicas: 3
    environment:
      - WORKER_TYPE=high_priority
    depends_on:
      - ml-model
      - rabbitmq
    networks:
      - app-network

  tests:
    build: .
    command: pytest tests/
    depends_on:
      - database
    environment:
      DATABASE_URL: postgresql+asyncpg://user:password@database:5432/testdb
    networks:
      - app-network

networks:
  app-network:
    driver: bridge


volumes:
  postgres_data:
  rabbitmq_data:
  model_volume:

networks:
  app-network:
    driver: bridge
