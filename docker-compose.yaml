version: "3.8"

services:
  app:
    build:
      context: .
      dockerfile: Dockerfile
    image: my-app  # Уникальное имя для локального образа
    environment:
      - PYTHONPATH=/usr/src/app
    container_name: balance-app
    restart: unless-stopped
    ports:
      - "8000:8000"
    env_file:
      - .env.app
    depends_on:
      rabbitmq:
        condition: service_healthy
      database:
        condition: service_healthy
    networks:
      app-network:
        aliases:
          - app.local

  migrations:
    image: my-app  # Используем тот же локальный образ
    command: sh -c "alembic -c alembic.ini upgrade head"
    depends_on:
      app:  # Добавляем зависимость от сервиса app
        condition: service_started
      database:
        condition: service_healthy
    env_file: .env.app
    networks:
      - app-network

  web-proxy:
    image: nginx:alpine
    container_name: nginx-proxy
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/conf.d/default.conf:ro
    depends_on:
      - app
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://app:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  rabbitmq:
    image: rabbitmq:3.12-management-alpine
    container_name: rabbitmq-broker
    ports:
      - "5672:5672"
      - "15672:15672"
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    environment:
      RABBITMQ_DEFAULT_USER: admin
      RABBITMQ_DEFAULT_PASS: securepassword
    restart: on-failure
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 10s
      timeout: 5s
      retries: 15

  database:
    image: postgres:13-alpine
    container_name: postgres-db
    volumes:
      - postgres_data:/var/lib/postgresql/data
    env_file:
      - .env.db
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U $POSTGRES_USER -d $POSTGRES_DB" ]
      interval: 5s
      timeout: 5s
      retries: 10
    networks:
      - app-network

  db-admin:
    image: adminer:latest
    container_name: adminer
    ports:
      - "8081:8080"
    environment:
      ADMINER_DEFAULT_SERVER: database
    depends_on:
      - database
    networks:
      - app-network

  ml-model:
    build:
      context: ./ml
      dockerfile: Dockerfile
    container_name: ml-model
    restart: unless-stopped
    environment:
      - MODEL_PATH=/app/models/pretrained
      - RABBITMQ_URL=amqp://admin:securepassword@rabbitmq-broker:5672/
      - BATCH_SIZE=32
      - DEVICE=cpu
      - HF_HOME=/app/hf-cache
    volumes:
      - ./ml/models:/app/models
      - ./ml/config:/app/config
      - huggingface_cache:/app/hf-cache
    networks:
      - app-network
    depends_on:
      rabbitmq:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8500/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  ml-worker:
    build: ./ml
    image: ml-model:latest
    command: ["python", "worker.py"]
    depends_on:
      - ml-model
    networks:
      - app-network

  tests:
    build:
      context: .
      dockerfile: Dockerfile.test
    command: pytest tests/
    depends_on:
      - database
      - rabbitmq
      - ml-model
    environment:
      - DATABASE_URL=postgresql+asyncpg://user:password@database:5432/testdb
      - ENVIRONMENT=TEST
    volumes:
      - ./tests:/app/tests
      - ./app:/app
    networks:
      - app-network

volumes:
  postgres_data:
  rabbitmq_data:
  huggingface_cache:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./hf-cache

networks:
  app-network:
    driver: bridge
